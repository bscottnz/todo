/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={594:(e,t,n)=>{var o,r;window,void 0===(r="function"==typeof(o=function(){function e(e,t){if((e=c(e))&&e.colcadeGUID){var n=r[e.colcadeGUID];return n.option(t),n}this.element=e,this.options={},this.option(t),this.create()}var t=e.prototype;t.option=function(e){this.options=function(e,t){for(var n in t)e[n]=t[n];return e}(this.options,e)};var n,o=0,r={};function a(t){var n=t.getAttribute("data-colcade").split(","),o={};n.forEach((function(e){var t=e.split(":"),n=t[0].trim(),r=t[1].trim();o[n]=r})),new e(t,o)}function i(e){var t=[];if(Array.isArray(e))t=e;else if(e&&"number"==typeof e.length)for(var n=0;n<e.length;n++)t.push(e[n]);else t.push(e);return t}function s(e,t){return i((t=t||document).querySelectorAll(e))}function c(e){return"string"==typeof e&&(e=document.querySelector(e)),e}return t.create=function(){this.errorCheck();var e=this.guid=++o;this.element.colcadeGUID=e,r[e]=this,this.reload(),this._windowResizeHandler=this.onWindowResize.bind(this),this._loadHandler=this.onLoad.bind(this),window.addEventListener("resize",this._windowResizeHandler),this.element.addEventListener("load",this._loadHandler,!0)},t.errorCheck=function(){var e=[];if(this.element||e.push("Bad element: "+this.element),this.options.columns||e.push("columns option required: "+this.options.columns),this.options.items||e.push("items option required: "+this.options.items),e.length)throw new Error("[Colcade error] "+e.join(". "))},t.reload=function(){this.updateColumns(),this.updateItems(),this.layout()},t.updateColumns=function(){this.columns=s(this.options.columns,this.element)},t.updateItems=function(){this.items=s(this.options.items,this.element)},t.getActiveColumns=function(){return this.columns.filter((function(e){return"none"!=getComputedStyle(e).display}))},t.layout=function(){this.activeColumns=this.getActiveColumns(),this._layout()},t._layout=function(){this.columnHeights=this.activeColumns.map((function(){return 0})),this.layoutItems(this.items)},t.layoutItems=function(e){e.forEach(this.layoutItem,this)},t.layoutItem=function(e){var t=Math.min.apply(Math,this.columnHeights),n=this.columnHeights.indexOf(t);this.activeColumns[n].appendChild(e),this.columnHeights[n]+=e.offsetHeight||1},t.append=function(e){var t=this.getQueryItems(e);this.items=this.items.concat(t),this.layoutItems(t)},t.prepend=function(e){var t=this.getQueryItems(e);this.items=t.concat(this.items),this._layout()},t.getQueryItems=function(e){e=i(e);var t=document.createDocumentFragment();return e.forEach((function(e){t.appendChild(e)})),s(this.options.items,t)},t.measureColumnHeight=function(e){var t=this.element.getBoundingClientRect();this.activeColumns.forEach((function(n,o){if(!e||n.contains(e)){var r=n.lastElementChild.getBoundingClientRect();this.columnHeights[o]=r.bottom-t.top}}),this)},t.onWindowResize=function(){clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(function(){this.onDebouncedResize()}.bind(this),100)},t.onDebouncedResize=function(){var e=this.getActiveColumns(),t=e.length==this.activeColumns.length,n=!0;this.activeColumns.forEach((function(t,o){n=n&&t==e[o]})),t&&n||(this.activeColumns=e,this._layout())},t.onLoad=function(e){this.measureColumnHeight(e.target)},t.destroy=function(){this.items.forEach((function(e){this.element.appendChild(e)}),this),window.removeEventListener("resize",this._windowResizeHandler),this.element.removeEventListener("load",this._loadHandler,!0),delete this.element.colcadeGUID,delete r[this.guid]},n=function(){s("[data-colcade]").forEach(a)},"complete"!=document.readyState?document.addEventListener("DOMContentLoaded",n):n(),e.data=function(e){var t=(e=c(e))&&e.colcadeGUID;return t&&r[t]},e.makeJQueryPlugin=function(t){function n(e,n,o){var r;return e.each((function(e,a){var i=t.data(a,"colcade");if(i){var s=i[n].apply(i,o);r=void 0===r?s:r}})),void 0!==r?r:e}function o(n,o){n.each((function(n,r){var a=t.data(r,"colcade");a?(a.option(o),a.layout()):(a=new e(r,o),t.data(r,"colcade",a))}))}(t=t||window.jQuery)&&(t.fn.colcade=function(e){if("string"==typeof e){var t=Array.prototype.slice.call(arguments,1);return n(this,e,t)}return o(this,e),this})},e.makeJQueryPlugin(),e})?o.call(t,n,t,e):o)||(e.exports=r)}},t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={exports:{}};return e[o](r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){e(1,arguments);var n=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===n?new Date(t.getTime()):"number"==typeof t||"[object Number]"===n?new Date(t):("string"!=typeof t&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(n){e(1,arguments);var o=t(n);return!isNaN(o)}var r={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function a(e){return function(t){var n=t||{},o=n.width?String(n.width):e.defaultWidth;return e.formats[o]||e.formats[e.defaultWidth]}}var i,s={date:a({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:a({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:a({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(e){return function(t,n){var o,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=r.width?String(r.width):a;o=e.formattingValues[i]||e.formattingValues[a]}else{var s=e.defaultWidth,c=r.width?String(r.width):e.defaultWidth;o=e.values[c]||e.values[s]}return o[e.argumentCallback?e.argumentCallback(t):t]}}function l(e){return function(t,n){var o=String(t),r=n||{},a=r.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],s=o.match(i);if(!s)return null;var c,d=s[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(l),c=e.valueCallback?e.valueCallback(c):c,{value:c=r.valueCallback?r.valueCallback(c):c,rest:o.slice(d.length)}}}const u={code:"en-US",formatDistance:function(e,t,n){var o;return n=n||{},o="string"==typeof r[e]?r[e]:1===t?r[e].one:r[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+o:o+" ago":o},formatLong:s,formatRelative:function(e,t,n,o){return c[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),o=t||{},r=n.match(i.matchPattern);if(!r)return null;var a=r[0],s=n.match(i.parsePattern);if(!s)return null;var c=i.valueCallback?i.valueCallback(s[0]):s[0];return{value:c=o.valueCallback?o.valueCallback(c):c,rest:n.slice(a.length)}}),era:l({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:l({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:l({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:l({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:l({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function m(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function h(n,o){e(2,arguments);var r=t(n).getTime(),a=m(o);return new Date(r+a)}function p(t,n){e(2,arguments);var o=m(n);return h(t,-o)}function g(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const f=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return g("yy"===t?o%100:o,t.length)},y=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):g(n+1,2)},v=function(e,t){return g(e.getUTCDate(),t.length)},w=function(e,t){return g(e.getUTCHours()%12||12,t.length)},b=function(e,t){return g(e.getUTCHours(),t.length)},C=function(e,t){return g(e.getUTCMinutes(),t.length)},_=function(e,t){return g(e.getUTCSeconds(),t.length)},L=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return g(Math.floor(o*Math.pow(10,n-3)),t.length)};var S=864e5;function E(n){e(1,arguments);var o=1,r=t(n),a=r.getUTCDay(),i=(a<o?7:0)+a-o;return r.setUTCDate(r.getUTCDate()-i),r.setUTCHours(0,0,0,0),r}function x(n){e(1,arguments);var o=t(n),r=o.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(r+1,0,4),a.setUTCHours(0,0,0,0);var i=E(a),s=new Date(0);s.setUTCFullYear(r,0,4),s.setUTCHours(0,0,0,0);var c=E(s);return o.getTime()>=i.getTime()?r+1:o.getTime()>=c.getTime()?r:r-1}function k(t){e(1,arguments);var n=x(t),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var r=E(o);return r}var T=6048e5;function q(n,o){e(1,arguments);var r=o||{},a=r.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:m(i),c=null==r.weekStartsOn?s:m(r.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=t(n),l=d.getUTCDay(),u=(l<c?7:0)+l-c;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function D(n,o){e(1,arguments);var r=t(n,o),a=r.getUTCFullYear(),i=o||{},s=i.locale,c=s&&s.options&&s.options.firstWeekContainsDate,d=null==c?1:m(c),l=null==i.firstWeekContainsDate?d:m(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var h=q(u,o),p=new Date(0);p.setUTCFullYear(a,0,l),p.setUTCHours(0,0,0,0);var g=q(p,o);return r.getTime()>=h.getTime()?a+1:r.getTime()>=g.getTime()?a:a-1}function P(t,n){e(1,arguments);var o=n||{},r=o.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:m(a),s=null==o.firstWeekContainsDate?i:m(o.firstWeekContainsDate),c=D(t,n),d=new Date(0);d.setUTCFullYear(c,0,s),d.setUTCHours(0,0,0,0);var l=q(d,n);return l}var M=6048e5;function N(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=t||"";return n+String(r)+i+g(a,2)}function j(e,t){return e%60==0?(e>0?"-":"+")+g(Math.abs(e)/60,2):A(e,t)}function A(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+g(Math.floor(r/60),2)+n+g(r%60,2)}const U={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});case"GGGG":default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return f(e,t)},Y:function(e,t,n,o){var r=D(e,o),a=r>0?r:1-r;return"YY"===t?g(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):g(a,t.length)},R:function(e,t){return g(x(e),t.length)},u:function(e,t){return g(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return g(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return g(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return y(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return g(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(n,o,r,a){var i=function(n,o){e(1,arguments);var r=t(n),a=q(r,o).getTime()-P(r,o).getTime();return Math.round(a/M)+1}(n,a);return"wo"===o?r.ordinalNumber(i,{unit:"week"}):g(i,o.length)},I:function(n,o,r){var a=function(n){e(1,arguments);var o=t(n),r=E(o).getTime()-k(o).getTime();return Math.round(r/T)+1}(n);return"Io"===o?r.ordinalNumber(a,{unit:"week"}):g(a,o.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):v(e,t)},D:function(n,o,r){var a=function(n){e(1,arguments);var o=t(n),r=o.getTime();o.setUTCMonth(0,1),o.setUTCHours(0,0,0,0);var a=o.getTime(),i=r-a;return Math.floor(i/S)+1}(n);return"Do"===o?r.ordinalNumber(a,{unit:"dayOfYear"}):g(a,o.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});case"EEEE":default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return g(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return g(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return g(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});case"iiii":default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):g(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):g(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):C(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):_(e,t)},S:function(e,t){return L(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return j(r);case"XXXX":case"XX":return A(r);case"XXXXX":case"XXX":default:return A(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return j(r);case"xxxx":case"xx":return A(r);case"xxxxx":case"xxx":default:return A(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+N(r,":");case"OOOO":default:return"GMT"+A(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+N(r,":");case"zzzz":default:return"GMT"+A(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return g(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return g((o._originalDate||e).getTime(),t.length)}};function O(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function W(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const H={p:W,P:function(e,t){var n,o=e.match(/(P+)(p+)?/),r=o[1],a=o[2];if(!a)return O(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",O(r,t)).replace("{{time}}",W(a,t))}};var Y=6e4;function z(e){return e.getTime()%Y}function I(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var o=n>0?(Y+z(t))%Y:z(t);return n*Y+o}var F=["D","DD"],G=["YY","YYYY"];function Q(e){return-1!==F.indexOf(e)}function B(e){return-1!==G.indexOf(e)}function R(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var X=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,J=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,V=/''/g,K=/[a-zA-Z]/;function Z(n,r,a){e(2,arguments);var i=String(r),s=a||{},c=s.locale||u,d=c.options&&c.options.firstWeekContainsDate,l=null==d?1:m(d),h=null==s.firstWeekContainsDate?l:m(s.firstWeekContainsDate);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var g=c.options&&c.options.weekStartsOn,f=null==g?0:m(g),y=null==s.weekStartsOn?f:m(s.weekStartsOn);if(!(y>=0&&y<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");var v=t(n);if(!o(v))throw new RangeError("Invalid time value");var w=I(v),b=p(v,w),C={firstWeekContainsDate:h,weekStartsOn:y,locale:c,_originalDate:v},_=i.match(J).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,H[t])(e,c.formatLong,C):e})).join("").match(X).map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return ee(e);var o=U[t];if(o)return!s.useAdditionalWeekYearTokens&&B(e)&&R(e,r,n),!s.useAdditionalDayOfYearTokens&&Q(e)&&R(e,r,n),o(b,e,c.localize,C);if(t.match(K))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return _}function ee(e){return e.match($)[1].replace(V,"'")}var te=n(594),ne=n.n(te);const oe=function(){function e(e,t){const i=e[re.getCurrentProject()];t.innerHTML="",0!=i.length&&(i.forEach(((s,c)=>{const d=document.createElement("div");d.classList.add("todo"),d.classList.add(`priority-${s.priority}`),d.setAttribute("data-index",c),d.setAttribute("data-project",`${s.project}`);const l=document.createElement("div");l.classList.add("todo__complete"),l.addEventListener("click",(n=>r(n,e,t)));const u=document.createElement("div");u.classList.add("todo__title"),u.textContent=s.name;const m=document.createElement("div");m.classList.add("todo__detail"),m.textContent="details",m.addEventListener("click",(e=>{n(e,i)}));const h=document.createElement("div");h.classList.add("todo__date");const p=new Date(s.date),g=`${Z(p,"MMM")} ${Z(p,"do")}`;h.textContent=g;const f=document.createElementNS("http://www.w3.org/2000/svg","svg");f.classList.add("todo__icon-edit"),f.classList.add("todo__icon"),f.addEventListener("click",(e=>o(e,i)));const y=document.createElementNS("http://www.w3.org/2000/svg","use");y.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","img/edit.svg#icon-edit"),f.appendChild(y);const v=document.createElementNS("http://www.w3.org/2000/svg","svg");v.classList.add("todo__icon"),v.classList.add("todo__icon-bin"),v.addEventListener("click",(n=>re.deleteToDo(n,e,t)));const w=document.createElementNS("http://www.w3.org/2000/svg","use");w.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","img/icons.svg#icon-bin"),v.appendChild(w),d.appendChild(l),d.appendChild(u),d.appendChild(m),d.appendChild(h),d.appendChild(f),d.appendChild(v),s.checked&&a(d),t.appendChild(d)})),localStorage.setItem("todos",JSON.stringify(e)))}function t(e,t){t.innerHTML="";for(const i in e)e[i].forEach(((s,c)=>{const d=document.createElement("div");d.classList.add("todo"),d.classList.add(`priority-${s.priority}`),d.setAttribute("data-index",c),d.setAttribute("data-project",`${s.project}`);const l=document.createElement("div");l.classList.add("todo__complete"),l.addEventListener("click",(n=>r(n,e,t)));const u=document.createElement("div");u.classList.add("todo__title"),u.textContent=s.name;const m=document.createElement("div");m.classList.add("todo__detail"),m.textContent="details",m.addEventListener("click",(t=>{n(t,e[i])}));const h=document.createElement("div");h.classList.add("todo__date");const p=new Date(s.date),g=`${Z(p,"MMM")} ${Z(p,"do")}`;h.textContent=g;const f=document.createElementNS("http://www.w3.org/2000/svg","svg");f.classList.add("todo__icon-edit"),f.classList.add("todo__icon"),f.addEventListener("click",(t=>o(t,e[i])));const y=document.createElementNS("http://www.w3.org/2000/svg","use");y.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","img/edit.svg#icon-edit"),f.appendChild(y);const v=document.createElementNS("http://www.w3.org/2000/svg","svg");v.classList.add("todo__icon"),v.classList.add("todo__icon-bin"),v.addEventListener("click",(n=>re.deleteToDo(n,e,t)));const w=document.createElementNS("http://www.w3.org/2000/svg","use");w.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","img/icons.svg#icon-bin"),v.appendChild(w),d.appendChild(l),d.appendChild(u),d.appendChild(m),d.appendChild(h),d.appendChild(f),d.appendChild(v),s.checked&&a(d),t.appendChild(d)}));localStorage.setItem("todos",JSON.stringify(e))}function n(e,t){const n=e.target.parentElement.dataset.index,o=document.querySelector(".overlay-details"),r=document.querySelector(".details-popup__content"),a=document.querySelector(".details-popup");r.innerHTML="";const i=document.createElement("div");i.classList.add("details-popup__content");const s=document.createElement("div");s.classList.add("details-popup__title"),s.textContent=t[n].name;const c=document.createElement("div");c.classList.add("details-popup__project");const d=document.createElement("span");d.textContent="Project:",d.classList.add("details-popup__catagory");const l=document.createElement("span");l.textContent=t[n].project,c.appendChild(d),c.appendChild(l);const u=document.createElement("div");u.classList.add("details-popup__priority");const m=document.createElement("span");m.textContent="Priority:",m.classList.add("details-popup__catagory");const h=document.createElement("span");h.textContent=t[n].priority[0].toUpperCase()+t[n].priority.slice(1),u.appendChild(m),u.appendChild(h);const p=document.createElement("div");p.classList.add("details-popup__due");const g=document.createElement("span");g.textContent="Due Date:",g.classList.add("details-popup__catagory");const f=document.createElement("span"),y=Z(new Date(t[n].date),"do"),v=`${Z(new Date(t[n].date),"MMMM")} ${y}, ${Z(new Date(t[n].date),"yyyy")}`;f.textContent=v,p.appendChild(g),p.appendChild(f);const w=document.createElement("div");w.classList.add("details-popup__details");const b=document.createElement("span");b.classList.add("details-popup__details-title"),b.textContent="Details:";const C=document.createElement("span");C.textContent=t[n].details,w.appendChild(b),w.appendChild(C),i.appendChild(s),i.appendChild(c),i.appendChild(u),i.appendChild(p),i.appendChild(w),r.appendChild(i),a.classList.toggle("details-popup-open"),o.classList.toggle("overlay-details-invisible")}function o(e,t){const n=e.target;let o,r;"svg"===n.tagName?o=n.parentElement.dataset.index:"use"===n.tagName&&(o=n.parentElement.parentElement.dataset.index),"svg"===n.tagName?r=n.parentElement.dataset.project:"use"===n.tagName&&(r=n.parentElement.parentElement.dataset.project);const a=document.querySelector(".overlay-edit"),i=document.querySelector(".edit-popup__entry"),c=document.querySelector(".edit-popup");i.innerHTML="";const d=document.createElement("textarea");d.classList.add("edit-popup__input"),d.setAttribute("maxlength","40"),d.required=!0,d.textContent=t[o].name,d.dataset.index=o,d.dataset.project=r;const l=document.createElement("textarea");l.classList.add("edit-popup__input","edit-popup__input-big"),l.setAttribute("placeholder","Details:"),l.textContent=t[o].details;const u=document.createElement("div");u.classList.add("edit-popup__date");const m=document.createElement("div");m.classList.add("edit-popup__date-title"),m.textContent="Due Date:";const h=document.createElement("input");h.classList.add("edit-popup__date-input"),h.setAttribute("type","date"),h.required=!0,h.setAttribute("value",t[o].date),u.appendChild(m),u.appendChild(h);const p=document.createElement("div");p.classList.add("edit-popup__wrapper-priority-submit");const g=document.createElement("div");g.classList.add("edit-popup__priority");const f=document.createElement("div");f.classList.add("edit-popup__priority-title"),f.textContent="Priority:";const y=document.createElement("input");y.setAttribute("type","radio"),y.setAttribute("id","low"),y.setAttribute("name","edit-priority"),y.setAttribute("value","low"),"low"===t[o].priority&&(y.checked=!0),y.required=!0;const v=document.createElement("label");v.setAttribute("for","low"),v.classList.add("edit-popup__priority-btn","edit-popup__priority-btn--low"),"low"===t[o].priority&&v.classList.add("edit-popup__priority-btn--low-active"),v.textContent="Low";const w=document.createElement("input");w.setAttribute("type","radio"),w.setAttribute("id","medium"),w.setAttribute("name","edit-priority"),w.setAttribute("value","medium"),"medium"===t[o].priority&&(w.checked=!0),w.required=!0;const b=document.createElement("label");b.setAttribute("for","medium"),b.classList.add("edit-popup__priority-btn","edit-popup__priority-btn--medium"),"medium"===t[o].priority&&b.classList.add("edit-popup__priority-btn--medium-active"),b.textContent="Medium";const C=document.createElement("input");C.setAttribute("type","radio"),C.setAttribute("id","high"),C.setAttribute("name","edit-priority"),C.setAttribute("value","high"),"high"===t[o].priority&&(C.checked=!0),C.required=!0;const _=document.createElement("label");_.setAttribute("for","high"),_.classList.add("edit-popup__priority-btn","edit-popup__priority-btn--high"),"high"===t[o].priority&&_.classList.add("edit-popup__priority-btn--high-active"),_.textContent="High",g.appendChild(f),g.appendChild(y),g.appendChild(v),g.appendChild(w),g.appendChild(b),g.appendChild(C),g.appendChild(_);const L=document.createElement("input");L.setAttribute("type","submit"),L.setAttribute("id","todo-edit-submit"),L.setAttribute("value","Confirm Edit"),L.classList.add("edit-popup__todo-submit"),p.appendChild(g),p.appendChild(L),i.appendChild(d),i.appendChild(l),i.appendChild(u),i.appendChild(p),document.querySelectorAll(".edit-popup__priority-btn").forEach((e=>{e.addEventListener("click",(e=>{s(e)}))})),c.classList.toggle("edit-popup-open"),a.classList.toggle("overlay-edit-invisible")}function r(e,t,n){const o=e.target.parentElement,r=o.children;r[0].classList.toggle("todo__complete-checked"),r[1].classList.toggle("todo__title-checked"),r[2].classList.toggle("todo__detail-checked"),r[3].classList.toggle("todo__date-checked"),r[4].classList.toggle("todo__icon-checked"),r[5].classList.toggle("todo__icon-checked");const a=o.dataset.project,i=o.dataset.index;t[a][i].checked=!t[a][i].checked,console.log(t[a]),localStorage.setItem("todos",JSON.stringify(t)),c(t,n)}function a(e){const t=e.children;t[0].classList.toggle("todo__complete-checked"),t[1].classList.toggle("todo__title-checked"),t[2].classList.toggle("todo__detail-checked"),t[3].classList.toggle("todo__date-checked"),t[4].classList.toggle("todo__icon-checked"),t[5].classList.toggle("todo__icon-checked")}function i(){document.querySelectorAll(".create-new__priority-btn").forEach((e=>{e.classList.remove(`create-new__priority-btn--${e.textContent.toLowerCase()}-active`)}))}function s(e){document.querySelectorAll(".edit-popup__priority-btn").forEach((e=>{e.classList.remove(`edit-popup__priority-btn--${e.textContent.toLowerCase()}-active`)}));const t=e.target.textContent.toLowerCase();e.target.classList.add(`edit-popup__priority-btn--${t}-active`)}function c(e,t){const n=document.querySelector(".projects");n.innerHTML="";const o=Object.assign({},e);delete o.home,delete o.today,delete o.week;for(const r in o){const a=document.createElement("li");a.classList.add("projects__item"),a.classList.add("nav__item--link"),a.classList.add("custom-project-count-container"),a.addEventListener("click",(n=>oe.changeFolder2(n,e,t))),a.addEventListener("click",(e=>l(e)));const i=document.createElement("span");i.classList.add("todo-folder"),i.classList.add("project-name"),i.textContent=r,i.addEventListener("click",(n=>oe.changeFolder(n,e,t)));const s=document.createElement("div");s.classList.add("project-count");let c=0;o[r].forEach((e=>{e.checked||c++})),s.textContent=c,a.appendChild(i),c>0&&a.appendChild(s),n.appendChild(a),re.getCurrentProject()==r&&a.classList.add("nav__selected")}const r=document.querySelector(".home-count");let a=0;for(const t in e)e[t].forEach((e=>{e.checked||a++}));r.textContent=a,r.style.display="inline-flex",r.textContent<1&&(r.style.display="none");const i=document.querySelector(".week-count");i.textContent=e.week.reduce(((e,t)=>e+!t.checked),0),i.style.display="inline-flex",i.textContent<1&&(i.style.display="none");const s=document.querySelector(".today-count");s.textContent=e.today.reduce(((e,t)=>e+!t.checked),0),s.style.display="inline-flex",s.textContent<1&&(s.style.display="none")}function d(e,n){document.querySelector(".main").innerHTML='<div class="add-or-remove">\n            <div class="add-or-remove__heading">Empty Project!</div>\n            <div class="add-or-remove__content">\n                <div class="add-or-remove__content-text">\n                    Create a new to-do item or delete project.\n                </div>\n                <div class="add-or-remove__content-btn">\n                    Delete Project\n                </div>\n            </div>\n        </div>',document.querySelector(".add-or-remove__content-btn").addEventListener("click",(()=>{delete e[re.getCurrentProject()],document.querySelector(".main").innerHTML="",localStorage.setItem("todos",JSON.stringify(e)),c(e,n),re.changeCurrentProject("home"),t(e,n),document.querySelector(".nav").children.item(0).classList.add("nav__selected"),console.log(document.querySelector(".nav").children.item(0))}))}function l(e){document.querySelectorAll(".nav__item--link").forEach((e=>{e.classList.remove("nav__selected")})),"Notes"===e.target.textContent?e.target.classList.add("nav__selected"):"span"==e.target.tagName||"SPAN"==e.target.tagName?e.target.parentElement.classList.add("nav__selected"):"li"!=e.target.tagName&&"LI"!=e.target.tagName||e.target.classList.add("nav__selected")}return{renderToDos:e,renderAllToDos:t,toggleCheckBox:r,applyCheckedOnReload:a,activePriority:function(e){i();const t=e.target.textContent.toLowerCase();e.target.classList.add(`create-new__priority-btn--${t}-active`)},removeActivePriority:i,editPriority:s,renderDetails:n,renderEdit:o,changeFolder:function(n,o,r){["Home","Week","Today"].includes(n.target.textContent)?re.changeCurrentProject(n.target.textContent.toLowerCase()):re.changeCurrentProject(n.target.textContent),console.log("you are in folder",re.getCurrentProject()),"home"===re.getCurrentProject()?(t(o,r),l(n)):(e(o,r),l(n)),["home","week","today"].includes(re.getCurrentProject())||o[re.getCurrentProject()].length<1&&d(o,r)},changeFolder2:function(n,o,r){"li"!=n.target.tagName&&"LI"!=n.target.tagName||(["Home","Week","Today"].includes(n.target.childNodes[0].textContent)?re.changeCurrentProject(n.target.childNodes[0].textContent.toLowerCase()):re.changeCurrentProject(n.target.childNodes[0].textContent),console.log("you are in folder",re.getCurrentProject()),"home"===re.getCurrentProject()?(t(o,r),l(n)):(e(o,r),l(n)),["home","week","today"].includes(re.getCurrentProject())||o[re.getCurrentProject()].length<1&&d(o,r))},renderProjectNames:c,renderProjectCount:function(e,t){},projectNamesScrollTop:function(){document.querySelector(".projects").scrollTop=0},projectNamesScrollBottom:function(){const e=document.querySelector(".projects");e.scrollTop=e.scrollHeight},renderEmptyProjectPlaceholder:d,updateActiveNavMain:l,resetActiveFormLink:function(){const e=document.querySelectorAll(".create-new__options-items");e.forEach((e=>{e.classList.remove("create-new__options-items-active")})),e[0].classList.add("create-new__options-items-active")}}}(),re=function(){let e="home";function t(t){e=t}function n(){return e}function o(e,t,n,o,r,a=!1){return{name:e,priority:t,date:n,details:o,project:r,checked:a}}function r(e,o){const r=Object.assign({},e);delete r.home,delete r.today,delete r.week,["home","week","today"].includes(n())||r[n()].length<1&&(delete e[n()],oe.renderProjectNames(e,o),t("home"),oe.renderAllToDos(e,o),document.querySelector(".nav").children.item(0).classList.add("nav__selected"),console.log(document.querySelector(".nav").children.item(0)))}return{changeCurrentProject:t,getCurrentProject:n,createToDo:o,addNewToDo:function(e,t,r,a,i){e.preventDefault();const s=document.querySelector("#new-todo-title").value,c=document.querySelector("#new-todo-details").value,d=document.querySelector("#new-todo-date").value,l=document.querySelector('[name="create-new-priority"]:checked').value,u=n(),m=o(s,l,d,c,u);t[u].push(m),"home"===n()?oe.renderAllToDos(t,r):oe.renderToDos(t,r),a.classList.toggle("overlay-new-invisible"),i.classList.toggle("create-new-open"),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{i.reset(),oe.removeActivePriority()})),oe.renderProjectNames(t,r)},editToDo:function(e,t,o,r,a){e.preventDefault();const i=e.target.firstElementChild.dataset.index,s=e.target.firstElementChild.dataset.project;t[s][i].name=document.querySelector(".edit-popup__input").value,t[s][i].details=document.querySelector(".edit-popup__input-big").value,t[s][i].date=document.querySelector(".edit-popup__date-input").value,t[s][i].priority=document.querySelector('[name="edit-priority"]:checked').value,"home"===n()?(oe.renderAllToDos(t,o),console.log(t)):oe.renderToDos(t,o),r.classList.toggle("overlay-edit-invisible"),a.classList.toggle("edit-popup-open")},deleteToDo:function(e,t,o){const a=e.target;let i,s;"svg"===a.tagName?i=a.parentElement.dataset.index:"use"===a.tagName&&(i=a.parentElement.parentElement.dataset.index),"svg"===a.tagName?s=a.parentElement.dataset.project:"use"===a.tagName&&(s=a.parentElement.parentElement.dataset.project),"home"===n()?(t[s].splice(i,1),oe.renderAllToDos(t,o)):(t[re.getCurrentProject()].splice(i,1),oe.renderToDos(t,o)),r(t,o),localStorage.setItem("todos",JSON.stringify(t)),oe.renderProjectNames(t,o)},addNewProject:function(e,n,o,r,a){const i=document.querySelector(".create-new__project-input").value;i&&!(i.toLowerCase()in n)?(n[i]=[],oe.renderProjectNames(n,a),re.changeCurrentProject(i),console.log("you are in folder",re.getCurrentProject()),"home"===re.getCurrentProject()?oe.renderAllToDos(n,a):oe.renderToDos(n,a),document.querySelectorAll(".nav__item--link").forEach((e=>{e.classList.remove("nav__selected")})),document.querySelector(".projects").lastChild.classList.add("nav__selected"),oe.projectNamesScrollBottom()):i&&i.toLowerCase()in n&&("home"===i.toLowerCase()?(console.log(`${i} already exists. changing folder to ${i}`),t(i.toLowerCase()),oe.renderAllToDos(n,a)):(console.log(`${i} already exists. changing folder to ${i}`),t(i.toLowerCase()),oe.renderToDos(n,a))),o.classList.toggle("overlay-new-invisible"),r.classList.toggle("create-new-open"),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{r.reset(),document.querySelector("#new-project-menu").style.display="none",document.querySelector("#new-todo-menu").style.display="flex"})),oe.renderEmptyProjectPlaceholder(n,a),localStorage.setItem("todos",JSON.stringify(n))},checkEmptyProject:r}}(),ae=function(){var e;function t(t){document.querySelector(".main").innerHTML='<div class="grid">\n                                                        <div class="grid-col grid-col--1">\n\n                                                        </div>\n                                                        <div class="grid-col grid-col--2">\n\n                                                        </div>\n                                                        <div class="grid-col grid-col--3">\n\n                                                     </div>';const n=document.querySelector(".grid");void 0!==e&&(e.destroy(),n.innerHTML='<div class="grid-col grid-col--1">\n\n                                  </div>\n                                  <div class="grid-col grid-col--2">\n\n                                  </div>\n                                  <div class="grid-col grid-col--3">\n\n                              </div>'),e=new(ne())(".grid",{columns:".grid-col",items:".note"}),t.forEach(((n,a)=>{const i=document.createElement("div");i.classList.add("note"),i.setAttribute("data-index",a);const s=document.createElement("div");s.classList.add("note__close"),s.innerHTML="&times;",s.addEventListener("click",(e=>o(e,t)));const c=document.createElement("div");c.classList.add("note__title"),c.textContent=n.title,c.setAttribute("contenteditable","true"),c.setAttribute("spellcheck","false"),c.addEventListener("input",(e=>r(e,t)));const d=document.createElement("div");d.classList.add("note__text"),d.textContent=n.text,d.setAttribute("contenteditable","true"),d.setAttribute("spellcheck","false"),d.addEventListener("input",(e=>r(e,t))),i.appendChild(s),i.appendChild(c),i.appendChild(d),e.append(i)}))}function n(e,t){return{title:e,text:t}}function o(e,n){console.log(n);const o=e.target.parentElement.dataset.index;n.splice(o,1),t(n),localStorage.setItem("notes",JSON.stringify(n))}function r(e,t){const n=e.target.classList[0].slice(6),o=e.target.parentElement.dataset.index,r=e.target.textContent;"title"===n?t[o].title=r:"text"===n&&(t[o].text=r),localStorage.setItem("notes",JSON.stringify(t))}return{arrangeNotes:t,createNote:n,addNewNote:function(e,o,r,a,i){const s=n(document.querySelector("#new-note-title").value,document.querySelector("#new-note-text").value);o.unshift(s),t(o),document.querySelector("#notes-nav").click(),r.classList.toggle("overlay-new-invisible"),a.classList.toggle("create-new-open"),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{a.reset(),document.querySelector("#new-note-menu").style.display="none",document.querySelector("#new-todo-menu").style.display="flex"})),localStorage.setItem("notes",JSON.stringify(o))},deleteNote:o,editNote:r}}(),ie=document.querySelector(".main"),se=document.querySelector(".new-todo"),ce=document.querySelector(".create-new__close"),de=document.querySelector(".overlay-new"),le=document.querySelector(".create-new"),ue=document.querySelector(".details-popup"),me=document.querySelector(".overlay-details"),he=document.querySelector(".edit-popup"),pe=document.querySelector(".overlay-edit"),ge=document.querySelector(".edit-popup"),fe=document.querySelectorAll(".todo-folder"),ye=document.querySelector(".create-new__project-submit"),ve=document.querySelector(".create-new__note-submit"),we=document.querySelector("#new-todo-link"),be=document.querySelector("#new-project-link"),Ce=document.querySelector("#new-note-link"),_e=document.querySelector("#new-todo-menu"),Le=document.querySelector("#new-project-menu"),Se=document.querySelector("#new-note-menu"),Ee=JSON.parse(localStorage.getItem("todos"))||{home:[],today:[],week:[],Gym:[],Study:[],Work:[]};localStorage.getItem("todos")||(Ee.home.push(re.createToDo("brush teeth","low","2021-12-12"," with colgate","home",!0)),Ee.home.push(re.createToDo("get dressed","high","2021-11-11","singlet cos its hot","home")),Ee.home.push(re.createToDo("feed jimmy","medium","2021-06-09","only the finest bickies","home",!0)),Ee.today.push(re.createToDo("get mail","medium","2021-06-09","im expecting something","today")),Ee.today.push(re.createToDo("cook dinner","medium","2021-06-09","juicy steak","today",!0)),Ee.week.push(re.createToDo("sport","medium","2021-06-09","","week")),Ee.Gym.push(re.createToDo("swim","medium","2021-06-09","","Gym",!0)),Ee.Gym.push(re.createToDo("walk","high","2021-06-09","","Gym")),Ee.Gym.push(re.createToDo("weights","low","2021-06-09","","Gym")),Ee.Study.push(re.createToDo("learn webkit","high","2021-06-09","","Study",!0)),Ee.Study.push(re.createToDo("learn react","medium","2021-06-09","","Study")),Ee.Work.push(re.createToDo("get that report on johnson's desk","low","2021-06-09","","Work")));const xe=JSON.parse(localStorage.getItem("notes"))||[];localStorage.getItem("notes")||(xe.push(ae.createNote("title","you can edit title and details in place")),xe.push(ae.createNote("books","go get some books")),xe.push(ae.createNote("shopping list","steak\ncheese\ntomatos\nsauce")),xe.push(ae.createNote("example note","example\nnote\nwith\nlots\nof\nlines\n")),xe.push(ae.createNote("another example note","example\nnote\nwith\neven\nmore\nlines\nthan\nthe\nlast\nnote")),xe.push(ae.createNote("another example note","example note to show off the pinterest style layout")),xe.push(ae.createNote("books","go get some more books")),xe.push(ae.createNote("one more example note","one\nmore\nexample\nnote"))),oe.renderAllToDos(Ee,ie),oe.renderProjectNames(Ee,ie),document.querySelector(".projects").scrollTop=0,fe.forEach((e=>{e.addEventListener("click",(e=>oe.changeFolder(e,Ee,ie)))})),we.addEventListener("click",(()=>{Le.style.display="none",Se.style.display="none",_e.style.display="flex"})),be.addEventListener("click",(()=>{_e.style.display="none",Se.style.display="none",Le.style.display="flex"})),Ce.addEventListener("click",(()=>{_e.style.display="none",Le.style.display="none",Se.style.display="flex"})),se.addEventListener("click",(()=>{de.classList.toggle("overlay-new-invisible"),le.classList.toggle("create-new-open")})),ce.addEventListener("click",(()=>{de.classList.toggle("overlay-new-invisible"),le.classList.toggle("create-new-open"),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{le.reset(),oe.removeActivePriority(),document.querySelector("#new-project-menu").style.display="none",document.querySelector("#new-note-menu").style.display="none",document.querySelector("#new-todo-menu").style.display="flex",oe.resetActiveFormLink()}))})),le.addEventListener("submit",(e=>{re.addNewToDo(e,Ee,ie,de,le)})),ye.addEventListener("click",(e=>{re.addNewProject(e,Ee,de,le,ie),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{oe.resetActiveFormLink()}))})),ve.addEventListener("click",(e=>{ae.addNewNote(e,xe,de,le,ie),(300,new Promise((e=>setTimeout(e,300)))).then((()=>{oe.resetActiveFormLink()}))})),ge.addEventListener("submit",(e=>{re.editToDo(e,Ee,ie,pe,ge)})),document.querySelectorAll(".create-new__priority-btn").forEach((e=>{e.addEventListener("click",(e=>{oe.activePriority(e)}))})),document.querySelector(".details-popup__close").addEventListener("click",(()=>{ue.classList.toggle("details-popup-open"),me.classList.toggle("overlay-details-invisible")})),document.querySelector(".edit-popup__close").addEventListener("click",(()=>{he.classList.toggle("edit-popup-open"),pe.classList.toggle("overlay-edit-invisible")})),document.querySelector("#notes-nav").addEventListener("click",(()=>ae.arrangeNotes(xe))),document.querySelector("#notes-nav").addEventListener("click",(e=>oe.updateActiveNavMain(e)));let ke=document.querySelectorAll(".nav__item--link");ke=Array.from(ke),ke.pop(),ke.forEach((e=>{e.addEventListener("click",(e=>oe.changeFolder2(e,Ee,ie)))}));const Te=document.querySelector(".menu-btn");let qe=!1;Te.addEventListener("click",(()=>{qe=!qe,qe?(document.querySelector(".side-bar").style.left=0,document.querySelector(".menu-btn__icon--before").style.transform="rotate(135deg)",document.querySelector(".menu-btn__icon--before").style.top="2px",document.querySelector(".menu-btn__icon--after").style.transform="rotate(-135deg)",document.querySelector(".menu-btn__icon--after").style.top="-2px",document.querySelector(".menu-btn__icon").style.backgroundColor="transparent"):(document.querySelector(".side-bar").style.left="140px",document.querySelector(".menu-btn__icon--before").style.transform="rotate(0)",document.querySelector(".menu-btn__icon--before").style.top="-6px",document.querySelector(".menu-btn__icon--after").style.transform="rotate(0)",document.querySelector(".menu-btn__icon--after").style.top="6px",document.querySelector(".menu-btn__icon").style.backgroundColor="#f7f7f7")}));const De=document.querySelectorAll(".create-new__options-items");De.forEach((e=>{e.addEventListener("click",(e=>{De.forEach((e=>{e.classList.remove("create-new__options-items-active")})),e.target.classList.add("create-new__options-items-active")}))})),console.log(Ee)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,